stages:
  - validate
  - build
  - test
  - package
  - deploy

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PYTHON_VERSION: "3.10"

# Cette section définit les caches pour accélérer les pipelines
cache:
  paths:
    - .pip-cache/
    - venv/

# Job pour exécuter les hooks pre-commit
pre-commit:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - pip install pre-commit
    - apt-get update && apt-get install -y git
  script:
    - pre-commit run --all-files
  only:
    - branches

# Job pour compiler votre projet
build:
  stage: build
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - pip install -r requirements.txt
    - pip install pytest
  artifacts:
    paths:
      - venv/
    expire_in: 1 week
  needs:
    - pre-commit

# Job pour exécuter les tests
test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - source venv/bin/activate
  script:
    - pytest tests/
  needs:
    - build

# Job pour valider le Dockerfile
validate-dockerfile:
  stage: validate
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint Dockerfile
  only:
    - branches
    - tags

# Job pour construire et publier l'image Docker
docker-build:
  stage: package
  image: docker:20.10
  services:
    - docker:20.10-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
    # Tag comme "latest" si on est sur la branche main
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker tag $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_IMAGE_NAME:latest
        docker push $DOCKER_IMAGE_NAME:latest
      fi
  needs:
    - test
    - validate-dockerfile

# Job pour bumper la version (uniquement sur main)
bump-version:
  stage: deploy
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - apt-get update && apt-get install -y git
    - git config --global user.email "pietrzak.raphael@ynov.com"
    - git config --global user.name "GitLab CI"
  script:
    - poetry version patch
    - git add pyproject.toml
    - git commit -m "chore(release): bump version to $(poetry version -s)"
    - git tag v$(poetry version -s)
    - git push origin main --tags

  only:
    - main
  needs:
    - docker-build
