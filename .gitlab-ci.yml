stages:
  - validate
  - build
  - test
  - package
  - deploy


variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TAG: ${CI_COMMIT_REF_SLUG}
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PYTHON_VERSION: "3.10"


# Cette section définit les caches pour accélérer les pipelines
cache:
  paths:
    - .pip-cache/
    - venv/

# Job pour exécuter les hooks pre-commit
pre-commit:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - docker
  before_script:
    - pip install pre-commit
    - apt-get update && apt-get install -y git
  script:
    - pre-commit run --all-files
  only:
    - branches

# Job pour compiler votre projet
build:
  stage: build
  image: python:${PYTHON_VERSION}-slim
  tags:
    - docker
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
  script:
    - pip install -r requirements.txt
    - pip install pytest
  artifacts:
    paths:
      - venv/
    expire_in: 1 week
  needs:
    - pre-commit

# Job pour exécuter les tests
test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  tags:
    - docker
  before_script:
    - source venv/bin/activate
  script:
    - pytest tests/
  needs:
    - build

# Job pour valider le Dockerfile
validate-dockerfile:
  stage: validate
  image: hadolint/hadolint:latest-debian
  tags:
    - docker
  script:
    - hadolint Dockerfile
  only:
    - branches
    - tags

# Job pour construire et pousser l'image Docker
docker-build:
  stage: package
  image: docker:20.10
  tags:
    - docker
  services:
    - docker:20.10-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker tag $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_IMAGE_NAME:latest
        docker push $DOCKER_IMAGE_NAME:latest
      fi
  needs:
    - job: test
      optional: true
    - job: validate-dockerfile
      optional: true

# Job pour bumper la version (uniquement sur main)
bump-version:
  stage: deploy
  image: python:${PYTHON_VERSION}-slim
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - when: never
  before_script:
    - apt-get update && apt-get install -y git
    - git config --global user.email "pietrzak.raphael@ynov.com"
    - git config --global user.name "GitLab CI"
  script:
    - pip install bump2version
    - bump2version patch --commit --tag
    - git push origin main --tags
  needs:
    - docker-build

# Job pour déployer l'application
deploy-app:
  stage: deploy
  tags:
    - shell
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_TAG
      when: always
  before_script:
    - apk add --no-cache openssh-client sshpass
    - mkdir -p ~/.ssh
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts


  script:
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker stop app-container || true"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker rm app-container || true"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker pull $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker run -d --name app-container -p 8241:5000 $DOCKER_IMAGE_NAME:$DOCKER_TAG"
    - echo "Application déployée sur http://$SSH_HOST:8241"
  needs:
    - docker-build

# Job pour déployer avec AWX
deploy-with-awx:
  stage: deploy
  tags:
    - shell
  script:
    - |
      curl -X POST "http://51.15.247.116:8080/api/v2/job_templates/1/launch/" \
           -u "raphael.pietrzak:Formation-Ynov-2025" \
           -H "Content-Type: application/json"
  when: manual
